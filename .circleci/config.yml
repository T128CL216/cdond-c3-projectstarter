version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.

      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
        workflow_id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<<parameters.workflow_id>>)
            ls
            cd backend
            npm install
            npm run migrations:revert
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run FrontEnd Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run BackEnd Test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Scan FrontEnd
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Scan BackEnd 
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: | 
            yum install -y tar
      - run:
          name: Install GZIP
          command: | 
            yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name="udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Insert Group Name in inventory file.
          command: |
            echo "[web]" > ~/inventory
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            stack_name=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            instance_ids=$(aws cloudformation describe-stack-resources --stack-name "$stack_name" --query 'StackResources[?ResourceType==`AWS::EC2::Instance`].PhysicalResourceId' --output text)
            ec2_ips=$(aws ec2 describe-instances --instance-ids $instance_ids --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $ec2_ips>> ~/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:21:50:8c:71:6c:ed:04:77:12:2e:ef:53:90:1d:6d"]
      - attach_workspace:
           at: ~/.circleci/ansible/
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/.circleci/ansible/inventory .circleci/ansible/configure-server.yml
      - destroy-environment
  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           ## Run and save the migration output
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to  memstash.io
  #         command: |   
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #                 # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
  #             curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #    # Here's where you will add some code to rollback on failure       

workflows:
  udacity_project:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]g
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]